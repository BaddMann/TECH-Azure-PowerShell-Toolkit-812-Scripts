version: '3.8'

services:
  azure-toolkit:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    image: azure-enterprise-toolkit:latest
    container_name: azure-toolkit-main
    environment:
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - AZURE_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}
      - TOOLKIT_MODE=interactive
    volumes:
      - toolkit-data:/azure-toolkit/data
      - toolkit-logs:/azure-toolkit/logs
      - ${HOME}/.azure:/root/.azure:ro
    networks:
      - toolkit-network
    restart: unless-stopped

  toolkit-api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    image: azure-toolkit-api:latest
    container_name: azure-toolkit-api
    ports:
      - "5000:5000"
    environment:
      - API_KEY=${API_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
    volumes:
      - toolkit-data:/azure-toolkit/data:ro
      - ./automation-scripts:/azure-toolkit/automation-scripts:ro
    networks:
      - toolkit-network
    depends_on:
      - redis
    restart: unless-stopped

  toolkit-worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    image: azure-enterprise-toolkit:latest
    container_name: azure-toolkit-worker
    environment:
      - WORKER_MODE=true
      - REDIS_HOST=redis
      - WORKER_CONCURRENCY=4
    volumes:
      - toolkit-data:/azure-toolkit/data
      - toolkit-logs:/azure-toolkit/logs
    networks:
      - toolkit-network
    depends_on:
      - redis
    deploy:
      replicas: 3
    restart: unless-stopped

  redis:
    image: redis:alpine
    container_name: azure-toolkit-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - toolkit-network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: azure-toolkit-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - toolkit-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: azure-toolkit-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - toolkit-network
    depends_on:
      - prometheus
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: azure-toolkit-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elastic-data:/usr/share/elasticsearch/data
    networks:
      - toolkit-network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    container_name: azure-toolkit-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - toolkit-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

volumes:
  toolkit-data:
  toolkit-logs:
  redis-data:
  prometheus-data:
  grafana-data:
  elastic-data:

networks:
  toolkit-network:
    driver: bridge