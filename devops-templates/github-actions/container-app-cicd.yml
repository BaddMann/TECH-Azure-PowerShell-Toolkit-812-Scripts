name: Container App CI/CD Pipeline
# Enterprise container application deployment with Azure Container Apps

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      container_app_name:
        description: 'Container App Name'
        required: true
        type: string
      container_image_tag:
        description: 'Container Image Tag'
        required: false
        default: 'latest'
        type: string
      scale_min_replicas:
        description: 'Minimum Replicas'
        required: false
        default: '1'
        type: string
      scale_max_replicas:
        description: 'Maximum Replicas'
        required: false
        default: '10'
        type: string

  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'Dockerfile'
      - '.github/workflows/container-app-cicd.yml'

  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - 'Dockerfile'

env:
  REGISTRY_NAME: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP_PREFIX }}-${{ github.event.inputs.environment || 'dev' }}
  CONTAINER_APP_ENVIRONMENT: containerapp-env-${{ github.event.inputs.environment || 'dev' }}

permissions:
  contents: read
  security-events: write
  packages: write
  actions: read

jobs:
  build-and-security-scan:
    name: Build and Security Scan
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ github.event.inputs.container_app_name || 'sample-app' }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ github.event.inputs.container_image_tag || 'latest' }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_VERSION=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Container Structure Test
        run: |
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64
          sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test
          
          # Create a basic structure test
          cat > structure-test.yaml << EOF
          schemaVersion: 2.0.0
          fileExistenceTests:
            - name: 'app files'
              path: '/app'
              shouldExist: true
          commandTests:
            - name: 'app runs'
              command: 'which'
              args: ['node']
              expectedOutput: ['/usr/local/bin/node']
          EOF
          
          container-structure-test test --image ${{ steps.meta.outputs.tags }} --config structure-test.yaml

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-security-scan
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/testdb
        run: npm run test:integration

  deploy-to-container-apps:
    name: Deploy to Azure Container Apps
    runs-on: self-hosted
    needs: [build-and-security-scan, unit-tests]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Container Apps
        uses: azure/container-apps-deploy-action@v2
        with:
          containerAppName: ${{ github.event.inputs.container_app_name || 'sample-app' }}
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          imageToDeploy: ${{ needs.build-and-security-scan.outputs.image-tag }}
          containerAppEnvironment: ${{ env.CONTAINER_APP_ENVIRONMENT }}
          targetPort: 3000
          ingress: external
          environmentVariables: |
            NODE_ENV=production
            LOG_LEVEL=info
            BUILD_VERSION=${{ github.sha }}
          secrets: |
            database-connection-string=${{ secrets.DATABASE_CONNECTION_STRING }}
            api-key=${{ secrets.API_KEY }}

      - name: Configure Container App Settings
        shell: pwsh
        run: |
          # Use our automation script for advanced configuration
          ./automation-scripts/App-Development/Azure-ContainerApps-Provisioning-Tool.ps1 `
            -ResourceGroupName "${{ env.RESOURCE_GROUP }}" `
            -ContainerAppName "${{ github.event.inputs.container_app_name || 'sample-app' }}" `
            -Action "Update" `
            -MinReplicas ${{ github.event.inputs.scale_min_replicas || '1' }} `
            -MaxReplicas ${{ github.event.inputs.scale_max_replicas || '10' }} `
            -EnableApplicationInsights `
            -EnableHealthProbes

      - name: Configure Application Insights
        run: |
          # Get Application Insights connection string
          APP_INSIGHTS_KEY=$(az monitor app-insights component show \
            --app ${{ github.event.inputs.container_app_name || 'sample-app' }}-insights \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query connectionString -o tsv)
          
          # Update container app with Application Insights
          az containerapp update \
            --name ${{ github.event.inputs.container_app_name || 'sample-app' }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --set-env-vars "APPLICATIONINSIGHTS_CONNECTION_STRING=$APP_INSIGHTS_KEY"

      - name: Run Health Check
        run: |
          # Get container app URL
          APP_URL=$(az containerapp show \
            --name ${{ github.event.inputs.container_app_name || 'sample-app' }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn -o tsv)
          
          # Wait for app to be ready
          for i in {1..30}; do
            if curl -f https://$APP_URL/health; then
              echo "✅ Application health check passed"
              break
            else
              echo "⏳ Waiting for application to be ready... ($i/30)"
              sleep 10
            fi
          done

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-to-container-apps
    if: github.event.inputs.environment == 'staging' || github.event.inputs.environment == 'prod'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get Application URL
        id: get-url
        run: |
          APP_URL=$(az containerapp show \
            --name ${{ github.event.inputs.container_app_name || 'sample-app' }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn -o tsv)
          echo "app-url=https://$APP_URL" >> $GITHUB_OUTPUT

      - name: Install Artillery
        run: npm install -g artillery@latest

      - name: Run Performance Tests
        run: |
          cat > perf-test.yml << EOF
          config:
            target: '${{ steps.get-url.outputs.app-url }}'
            phases:
              - duration: 60
                arrivalRate: 5
              - duration: 120
                arrivalRate: 10
              - duration: 60
                arrivalRate: 20
          scenarios:
            - name: "Health check"
              requests:
                - get:
                    url: "/health"
            - name: "API endpoints"
              requests:
                - get:
                    url: "/api/status"
          EOF
          
          artillery run perf-test.yml --output report.json
          artillery report report.json

      - name: Upload Performance Results
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-results
          path: |
            report.json
            report.html

  security-scan-deployed:
    name: Security Scan Deployed App
    runs-on: ubuntu-latest
    needs: deploy-to-container-apps
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get Application URL
        id: get-url
        run: |
          APP_URL=$(az containerapp show \
            --name ${{ github.event.inputs.container_app_name || 'sample-app' }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn -o tsv)
          echo "app-url=https://$APP_URL" >> $GITHUB_OUTPUT

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: ${{ steps.get-url.outputs.app-url }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-to-container-apps, performance-tests, security-scan-deployed]
    if: failure() && github.event.inputs.environment == 'prod'
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Rollback Container App
        run: |
          # Get previous revision
          PREVIOUS_REVISION=$(az containerapp revision list \
            --name ${{ github.event.inputs.container_app_name || 'sample-app' }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query '[1].name' -o tsv)
          
          # Activate previous revision
          az containerapp revision activate \
            --revision $PREVIOUS_REVISION \
            --resource-group ${{ env.RESOURCE_GROUP }}
          
          echo "🔄 Rolled back to revision: $PREVIOUS_REVISION"

  cleanup-old-images:
    name: Cleanup Old Container Images
    runs-on: ubuntu-latest
    needs: deploy-to-container-apps
    if: success() && github.ref == 'refs/heads/main'
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Cleanup old container images
        run: |
          # Keep only the latest 10 images
          REPOSITORY="${{ github.event.inputs.container_app_name || 'sample-app' }}"
          
          # Get list of tags sorted by creation date
          OLD_TAGS=$(az acr repository show-tags \
            --name ${{ env.REGISTRY_NAME }} \
            --repository $REPOSITORY \
            --orderby time_desc \
            --query '[10:].[name]' -o tsv)
          
          # Delete old tags
          for tag in $OLD_TAGS; do
            echo "🗑️ Deleting old image: $REPOSITORY:$tag"
            az acr repository delete \
              --name ${{ env.REGISTRY_NAME }} \
              --image $REPOSITORY:$tag \
              --yes
          done

  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-to-container-apps, performance-tests, security-scan-deployed]
    if: always()
    steps:
      - name: Notify Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              text: "✅ Container App Deployment Successful",
              attachments: [{
                color: "good",
                fields: [{
                  title: "Environment",
                  value: "${{ github.event.inputs.environment || 'dev' }}",
                  short: true
                }, {
                  title: "Application",
                  value: "${{ github.event.inputs.container_app_name || 'sample-app' }}",
                  short: true
                }, {
                  title: "Image Tag",
                  value: "${{ needs.build-and-security-scan.outputs.image-tag }}",
                  short: true
                }]
              }]
            }

      - name: Notify Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              text: "❌ Container App Deployment Failed",
              attachments: [{
                color: "danger",
                fields: [{
                  title: "Environment",
                  value: "${{ github.event.inputs.environment || 'dev' }}",
                  short: true
                }, {
                  title: "Application",
                  value: "${{ github.event.inputs.container_app_name || 'sample-app' }}",
                  short: true
                }, {
                  title: "Failed Job",
                  value: "${{ github.job }}",
                  short: true
                }]
              }]
            }
